# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code, then push the build to the deploy branch
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build

env:
  DEPLOY_BRANCH_POSTFIX: deploy # Configure the destination branch postfix (code on "main" branch will be built and pushed into "main-POSTFIX" branch)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
  

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build
    - name: Configure Git informations
      run: |
        git config --global user.name $GITHUB_ACTOR
        git config --global user.email $GITHUB_ACTOR@users.noreply.github.com
        
    - name: Synchronize & push into deployment branch
      run: |
        GIT_BRANCH=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)
        DEPLOY_BRANCH=$GIT_BRANCH-$DEPLOY_BRANCH_POSTFIX
        GIT_COMMIT=$(git rev-parse --short HEAD)
        git fetch
        mkdir RELEASE
        mv .git RELEASE/.git
        cd RELEASE
        echo "Checking out $DEPLOY_BRANCH"
        git checkout -b $DEPLOY_BRANCH
        git pull --rebase origin $DEPLOY_BRANCH
        git stash && git stash drop
        (git pull --depth 1 origin $DEPLOY_BRANCH --rebase -X theirs --allow-unrelated-histories) || (echo "Deployment branch synced")
        mv ./.git ../.git
        cd ..
        # Push build into the deployment branch
        echo "Pushing build $GIT_COMMIT to $DEPLOY_BRANCH"
        mv .git dist/.git
        cd dist
        git add -A
        git commit -m "Automated build $GIT_COMMIT"
        git push origin $DEPLOY_BRANCH
        cd ..

    
